
import Foundation

/*:
 ## Упражнение - опциональные значения
 
 >Во время выполнения упражнений данного плейграунда, вы будете выводить в консоль опциональные значения.  Компилятор Swift выдаст предупреждение: «Expression implicitly coerced from `Int?` to Any».  Для целей выполнения заданий, можете данные предупреждения игнорировать.
 
 Ваше приложение запрашивает пользователя его возраст.  Введённые пользователем данные передаются вам в виде текста, `String`.  Однако, вам нужно сохранить значение в виде целого числа `Int`.  Пользователь может сделать ошибку и ввести неверные данные.
 
 Объявите переменную `userInputAge` типа `String` и присвойте ей значение "34e" для моделирования опечатки.  Затем определите свойство `userAge` типа `Int` и используйте конструктор `Int` для преобразования `userInputAge`.  Какую ошибку вы получаете?
 */
let userInputAge = "34e"
let userAge: Int?
userAge = Int(userInputAge)
//Ошибка потому что свойство userAge не инициализированно, а только объявлено.
/*:
 Теперь поменяйте тип `userAge` на `Int?`, и напечатайте значение `userAge`.  Почему значение `userAge` равно `nil`?  Ответьте в комментарии или внутри команды print.
 */
print(userAge)
//Когда к типу Int свойства userAge добавил "?", свойство userAge получило nil и стало опциональным Int. Поскольку метод Int() может иметь недопустимый аргумент, он возвращает опциональный Int (Int?) - как я понял для безопасности. А т.к. свойство userInputAge имеет недопустимое значение для метода Int(), то конвертация не произойдет и получится nil в свойстве userAge.
/*:
 Теперь исправьте опечатку в значении `userInputAge`.  Что-нибудь в результатах вывода кажется вам неуместным?
 
 Напечатайте `userAge` снова, но теперь извлеките `userAge` с помощью оператора «!».
 */
print(userAge!)
//Когда убрал символ "е" из свойства userInputAge, то в print(userAge) вывелся Опционал Optional(34), т.к. метод Int() может иметь недопустимый аргумент, он возвращает опциональный Int (Int?). Когда поставил оператор «!» в print(userAge!), то свойство userAge принудительно извлеклось из Optional(34) и получил значение 34.
/*:
 Используйте привязку опционалов для извлечения `userAge`.  Если `userAge` содержит значение, выведите его в консоль.
 */
if let userAge = userAge {
    print(userAge)
}
/*:
 Теперь снова эмулируйте опечатку и попробуйте вывести на консоль целочисленное значение переменной `userInputAge`, при помощи оператора "!". Какую ошибку вы получите? Почему?
 */
print(Int(userInputAge!))
//Ошибка: Не получилось принудительно извлечь значение из свойства с типом String. Извлечение работает только с опциональными типами.

//: [Ранее: Задание 1](@previous)  |  задание 2 из 4  |  [Далее: Задание 3](@next)
